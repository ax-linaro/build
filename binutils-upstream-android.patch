diff --git a/bfd/archive.c b/bfd/archive.c
index 32b07a7..cf50a5f 100644
--- a/bfd/archive.c
+++ b/bfd/archive.c
@@ -1880,7 +1880,7 @@ bfd_ar_hdr_from_filesystem (bfd *abfd, const char *filename, bfd *member)
     {
       /* Assume we just "made" the member, and fake it.  */
       struct bfd_in_memory *bim = (struct bfd_in_memory *) member->iostream;
-      time (&status.st_mtime);
+      time ((time_t*)&status.st_mtime);
       status.st_uid = getuid ();
       status.st_gid = getgid ();
       status.st_mode = 0644;
diff --git a/binutils/stabs.c b/binutils/stabs.c
index 8b45977..140bada 100644
--- a/binutils/stabs.c
+++ b/binutils/stabs.c
@@ -2593,7 +2593,7 @@ parse_stab_members (void *dhandle, struct stab_handle *info,
 	  bfd_boolean constp, volatilep, staticp;
 	  bfd_vma voffset;
 	  debug_type context;
-	  const char *physname;
+	  const char *physname = 0;
 	  bfd_boolean varargs;
 
 	  if (look_ahead_type != DEBUG_TYPE_NULL)
diff --git a/gas/config/tc-arm.c b/gas/config/tc-arm.c
index b3d8d62..9eb499d 100644
--- a/gas/config/tc-arm.c
+++ b/gas/config/tc-arm.c
@@ -1941,7 +1941,7 @@ parse_neon_el_struct_list (char **str, unsigned *pbase,
   enum arm_reg_type rtype = REG_TYPE_NDQ;
   const char *const incr_error = _("register stride must be 1 or 2");
   const char *const type_error = _("mismatched element/structure types in list");
-  struct neon_typed_alias firsttype;
+  struct neon_typed_alias firsttype = { 0, 0, { 0, 0 } };
 
   if (skip_past_char (&ptr, '{') == SUCCESS)
     leading_brace = 1;
diff --git a/gold/Makefile.am b/gold/Makefile.am
index 8e2fff1..6de4af6 100644
--- a/gold/Makefile.am
+++ b/gold/Makefile.am
@@ -27,7 +27,7 @@ tooldir = $(exec_prefix)/$(target_alias)
 ACLOCAL_AMFLAGS = -I ../bfd -I ../config
 
 AM_CFLAGS = $(WARN_CFLAGS) $(LFS_CFLAGS) $(RANDOM_SEED_CFLAGS)
-AM_CXXFLAGS = $(WARN_CXXFLAGS) $(LFS_CFLAGS) $(RANDOM_SEED_CFLAGS)
+AM_CXXFLAGS = $(WARN_CXXFLAGS) $(LFS_CFLAGS) $(RANDOM_SEED_CFLAGS) -Wno-error
 
 AM_CPPFLAGS = \
 	-I$(srcdir) -I$(srcdir)/../include -I$(srcdir)/../elfcpp \
diff --git a/gold/Makefile.in b/gold/Makefile.in
index 09de14c..6507e1a 100644
--- a/gold/Makefile.in
+++ b/gold/Makefile.in
@@ -410,7 +410,7 @@ SUBDIRS = po testsuite
 tooldir = $(exec_prefix)/$(target_alias)
 ACLOCAL_AMFLAGS = -I ../bfd -I ../config
 AM_CFLAGS = $(WARN_CFLAGS) $(LFS_CFLAGS) $(RANDOM_SEED_CFLAGS)
-AM_CXXFLAGS = $(WARN_CXXFLAGS) $(LFS_CFLAGS) $(RANDOM_SEED_CFLAGS)
+AM_CXXFLAGS = $(WARN_CXXFLAGS) $(LFS_CFLAGS) $(RANDOM_SEED_CFLAGS) -Wno-error
 AM_CPPFLAGS = \
 	-I$(srcdir) -I$(srcdir)/../include -I$(srcdir)/../elfcpp \
 	-DLOCALEDIR="\"$(datadir)/locale\"" \
diff --git a/gold/archive.cc b/gold/archive.cc
index f2cd848..753266f 100644
--- a/gold/archive.cc
+++ b/gold/archive.cc
@@ -584,7 +584,7 @@ Archive::get_file_and_offset(off_t off, Input_file** input_file, off_t* memoff,
       const char* arch_path = this->filename().c_str();
       const char* basename = lbasename(arch_path);
       if (basename > arch_path)
-        member_name->replace(0, 0,
+        member_name->replace((std::string::size_type)0, 0,
                              this->filename().substr(0, basename - arch_path));
     }
 
diff --git a/gold/configure b/gold/configure
index cb56b65..e9e5f00 100755
--- a/gold/configure
+++ b/gold/configure
@@ -6701,8 +6701,11 @@ else
 fi
 
 
-
-LFS_CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
+# On Android, _FILE_OFFSET_BITS=64 causes unresolved
+# references to 64-bit variants of _M_seek in stlport
+if ! echo $host |grep -q android; then
+	LFS_CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
+fi
 
 
 for ac_header in sys/mman.h
diff --git a/gold/configure.ac b/gold/configure.ac
index e3e10b3..bdd7512 100644
--- a/gold/configure.ac
+++ b/gold/configure.ac
@@ -473,7 +473,11 @@ AC_SUBST(GOLD_LDADD)
 
 dnl Force support for large files by default.  This may need to be
 dnl host dependent.  If build == host, we can check getconf LFS_CFLAGS.
-LFS_CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
+# On Android, _FILE_OFFSET_BITS=64 causes unresolved
+# references to 64-bit variants of _M_seek in stlport
+if ! echo $host |grep -q android; then
+	LFS_CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
+fi
 AC_SUBST(LFS_CFLAGS)
 
 AC_CHECK_HEADERS(sys/mman.h)
diff --git a/gold/gdb-index.cc b/gold/gdb-index.cc
index 91634a4..ccbb240 100644
--- a/gold/gdb-index.cc
+++ b/gold/gdb-index.cc
@@ -29,6 +29,8 @@
 #include "output.h"
 #include "demangle.h"
 
+#include <ctype.h> // for tolower
+
 namespace gold
 {
 
diff --git a/gold/powerpc.cc b/gold/powerpc.cc
index 0653ea7..1c3f0b5 100644
--- a/gold/powerpc.cc
+++ b/gold/powerpc.cc
@@ -923,7 +923,7 @@ class Target_powerpc : public Sized_target<size, big_endian>
     bool issued_non_pic_error_;
   };
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   symval_for_branch(const Symbol_table* symtab, Address value,
 		    const Sized_symbol<size>* gsym,
 		    Powerpc_relobj<size, big_endian>* object,
@@ -2316,7 +2316,7 @@ Target_powerpc<size, big_endian>::group_sections(Layout* layout,
       typedef Output_section::Input_section_list Input_section_list;
       for (Input_section_list::const_reverse_iterator i
 	     = (*o)->input_sections().rbegin();
-	   i != (*o)->input_sections().rend();
+	   i != (Input_section_list::const_reverse_iterator)(*o)->input_sections().rend();
 	   ++i)
 	{
 	  if (i->is_input_section())
@@ -3249,20 +3249,20 @@ class Stub_table : public Output_relaxed_input_section
 		     Address);
 
   // Find a given plt call stub.
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   find_plt_call_entry(const Symbol*) const;
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   find_plt_call_entry(const Sized_relobj_file<size, big_endian>*,
 		      unsigned int) const;
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   find_plt_call_entry(const Sized_relobj_file<size, big_endian>*,
 		      const Symbol*,
 		      unsigned int,
 		      Address) const;
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   find_plt_call_entry(const Sized_relobj_file<size, big_endian>*,
 		      unsigned int,
 		      unsigned int,
@@ -3272,7 +3272,7 @@ class Stub_table : public Output_relaxed_input_section
   void
   add_long_branch_entry(const Powerpc_relobj<size, big_endian>*, Address);
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   find_long_branch_entry(const Powerpc_relobj<size, big_endian>*,
 			 Address) const;
 
@@ -3285,7 +3285,7 @@ class Stub_table : public Output_relaxed_input_section
     this->branch_size_ = 0;
   }
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   set_address_and_size(const Output_section* os, Address off)
   {
     Address start_off = off;
@@ -3302,14 +3302,14 @@ class Stub_table : public Output_relaxed_input_section
     return my_size;
   }
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   stub_address() const
   {
     return align_address(this->address() + this->orig_data_size_,
 			 this->stub_align());
   }
 
-  Address
+  typename elfcpp::Elf_types<size>::Elf_Addr
   stub_offset() const
   {
     return align_address(this->offset() + this->orig_data_size_,
diff --git a/gold/stringpool.cc b/gold/stringpool.cc
index 665fcc8..6ede45d 100644
--- a/gold/stringpool.cc
+++ b/gold/stringpool.cc
@@ -77,7 +77,7 @@ Stringpool_template<Stringpool_char>::reserve(unsigned int n)
   // rehash() implementation is broken in gcc 4.0.3's stl
   //this->string_set_.rehash(this->string_set_.size() + n);
   //return;
-#elif defined(HAVE_EXT_HASH_MAP)
+#elif defined(HAVE_EXT_HASH_MAP) || defined(ANDROID)
   this->string_set_.resize(this->string_set_.size() + n);
   return;
 #endif
@@ -503,7 +503,7 @@ template<typename Stringpool_char>
 void
 Stringpool_template<Stringpool_char>::print_stats(const char* name) const
 {
-#if defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP)
+#if defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP) || defined(ANDROID)
   fprintf(stderr, _("%s: %s entries: %zu; buckets: %zu\n"),
 	  program_name, name, this->string_set_.size(),
 	  this->string_set_.bucket_count());
diff --git a/gold/symtab.cc b/gold/symtab.cc
index 2e17529..e6ae14d 100644
--- a/gold/symtab.cc
+++ b/gold/symtab.cc
@@ -3150,7 +3150,7 @@ Symbol_table::sized_write_section_symbol(const Output_section* os,
 void
 Symbol_table::print_stats() const
 {
-#if defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP)
+#if defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP) || defined(ANDROID)
   fprintf(stderr, _("%s: symbol table entries: %zu; buckets: %zu\n"),
 	  program_name, this->table_.size(), this->table_.bucket_count());
 #else
diff --git a/gold/system.h b/gold/system.h
index 3e6fe1d..a9a9464 100644
--- a/gold/system.h
+++ b/gold/system.h
@@ -87,17 +87,27 @@ struct hash<off_t> : public std::unary_function<off_t, std::size_t>
 } } // Close namespaces.
 #endif // !defined(HAVE_TR1_HASH_OFF_T)
 
-#elif defined(HAVE_EXT_HASH_MAP) && defined(HAVE_EXT_HASH_SET)
-
+#elif defined(ANDROID) || (defined(HAVE_EXT_HASH_MAP) && defined(HAVE_EXT_HASH_SET))
+
+#ifdef ANDROID // STLport is a bit like libstdc++ in terms of extensions... But not quite the same
+#include <hash_map>
+#include <hash_set>
+#include <stl/_hash_fun.h>
+#define HASHMAP_NAMESPACE std
+using std::_STLP_PRIV_NAME::__stl_hash_string;
+#else
 #include <ext/hash_map>
 #include <ext/hash_set>
+#define HASHMAP_NAMESPACE __gnu_cxx
+#endif
+
 #include <string>
 
-#define Unordered_set __gnu_cxx::hash_set
-#define Unordered_map __gnu_cxx::hash_map
-#define Unordered_multimap __gnu_cxx::hash_multimap
+#define Unordered_set HASHMAP_NAMESPACE::hash_set
+#define Unordered_map HASHMAP_NAMESPACE::hash_map
+#define Unordered_multimap HASHMAP_NAMESPACE::hash_multimap
 
-namespace __gnu_cxx
+namespace HASHMAP_NAMESPACE
 {
 
 template<>
diff --git a/libiberty/Makefile.in b/libiberty/Makefile.in
index 75ff82d..eb419bb 100644
--- a/libiberty/Makefile.in
+++ b/libiberty/Makefile.in
@@ -175,6 +175,7 @@ REQUIRED_OFILES =							\
 	./getruntime.$(objext) ./hashtab.$(objext) ./hex.$(objext)	\
 	./lbasename.$(objext) ./lrealpath.$(objext)			\
 	./make-relative-prefix.$(objext) ./make-temp-file.$(objext)	\
+	./mkstemps.$(objext)						\
 	./objalloc.$(objext)						\
 	./obstack.$(objext)						\
 	./partition.$(objext) ./pexecute.$(objext) ./physmem.$(objext)	\
diff --git a/libiberty/getpagesize.c b/libiberty/getpagesize.c
index 1c3a263..e9d6362 100644
--- a/libiberty/getpagesize.c
+++ b/libiberty/getpagesize.c
@@ -60,11 +60,13 @@ BUGS
 # endif /* PAGESIZE */
 #endif /* GNU_OUR_PAGESIZE */
 
+#ifndef __BIONIC__ /* Bionic implements getpagesize() itself */
 int
 getpagesize (void)
 {
   return (GNU_OUR_PAGESIZE);
 }
+#endif
 
 #else /* VMS */
 
diff --git a/opcodes/s390-mkopc.c b/opcodes/s390-mkopc.c
index 6aed72b..654c01c 100644
--- a/opcodes/s390-mkopc.c
+++ b/opcodes/s390-mkopc.c
@@ -298,7 +298,7 @@ dumpTable (void)
   int  ix;
 
   /*  Write hash table entries (slots).  */
-  printf (file_header);
+  printf ("%s", file_header);
 
   for (ix = 0; ix < no_ops; ix++)
     {
